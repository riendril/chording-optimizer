[GENERAL]
# Path to keyboard layout definition
KEYLAYOUT_FILE               = data/examples/input/keylayouts/Qwerty_Traditional_US_ANSI_letters.layout
MAX_LETTER_COUNT                  = 6                 # Maximum letters allowed in a chord
MIN_LETTER_COUNT                  = 3                 # Minimum letters required for a chord
OUTPUT_FORMAT                = STANDARD_JSON          # Currently only STANDARD_JSON is supported

[DEBUG]
ENABLED                      = false                                           # Enable/disable this entire section
LOG_LEVEL                    = ERROR                                           # ERROR, WARNING, INFO, DEBUG
LOG_FILE                     = data/output/logs/debug.log                      # Optional log file path
PRINT_COST_DETAILS           = true                                            # Print detailed info for each generated chord
SAVE_INTERMEDIATE_RESULTS    = true                                            # Save intermediate processing results

[BENCHMARK]
ENABLED                      = true                                            # Enable performance benchmarking (with nice visual output)
TRACK_INDIVIDUAL_METRICS     = false                                           # Benchmark individual metrics to identify bottlenecks
VISUAL_UPDATE_INTERVAL       = 1000                                            # Progress update frequency (in single metric calculations performed)

[STANDALONE_WEIGHTS]
# All standalone costs for a chord are multiplied for the total_cost of a chord
# if weight > 1.0 the metric gets optimized against (minimized)
# if weight == 1.0 the metric does not influence the cost
# if weight < 1.0 the metric gets optimized towards (maximized)
# if weight == 0 the cost is set to 0
# if weight < 0 the cost is set to infinity

# Base cost
CHORD_LENGTH_WEIGHT                  = 1.0    # Base cost for chord length

# MOVEMENT COSTS - penalties for necessary movements
HORIZONTAL_STRETCH_WEIGHT           = 1.0    # Horizontal finger stretching
HORIZONTAL_PINCH_WEIGHT             = 1.0    # Horizontal finger pinching movements
VERTICAL_STRETCH_WEIGHT             = 1.0    # Vertical finger stretching
VERTICAL_PINCH_WEIGHT               = 1.0    # Vertical finger pinching movements
DIAGONAL_STRETCH_WEIGHT             = 1.0    # Diagonal finger stretching
DIAGONAL_PINCH_WEIGHT               = 1.0    # Combined horizontal and vertical pinching

# COMBINATION COSTS - penalties for specific finger combinations
SAME_FINGER_DOUBLE_ADJACENT_WEIGHT  = 1.0    # Using same finger on adjacent keys
SAME_FINGER_DOUBLE_GAP_WEIGHT       = 1.0    # Using same finger with a gap between keys
SAME_FINGER_TRIPLE_WEIGHT           = 1.0    # Using same finger on 3 keys
FULL_SCISSOR_DOUBLE_WEIGHT          = 1.0    # Two-finger scissor movement
FULL_SCISSOR_TRIPLE_WEIGHT          = 1.0    # Three-finger scissor movement
FULL_SCISSOR_QUADRUPLE_WEIGHT       = 1.0    # Four-finger scissor movement
FULL_SCISSOR_QUINTUPLE_WEIGHT       = 1.0    # Five-finger scissor movement
HALF_SCISSOR_DOUBLE_WEIGHT          = 1.0    # Partial scissor movement with two fingers
HORIZONTAL_STRETCH_DOUBLE_WEIGHT    = 1.0    # Double horizontal stretch
PINKY_RING_SCISSOR_WEIGHT           = 1.0    # Scissor between pinky and ring fingers
RING_INDEX_SCISSOR_WEIGHT           = 1.0    # Scissor between ring and index fingers

[ASSIGNMENT_WEIGHTS]
FIRST_LETTER_UNMATCHED_WEIGHT       = 1.0    # Penalty for first letter mismatch
SECOND_LETTER_UNMATCHED_WEIGHT      = 1.0    # Penalty for second letter mismatch
LAST_LETTER_UNMATCHED_WEIGHT        = 1.0    # Penalty for last letter mismatch
PHONETIC_DISSIMILARITY_WEIGHT       = 1.0    # Penalty for phonetic differences
EXTRA_LETTER_WEIGHT                 = 1.0    # Penalty for additional letters in chord

[SET_WEIGHTS]
FINGER_UTILIZATION_WEIGHT           = 1.0    # Balance of individual finger usage
HAND_UTILIZATION_WEIGHT             = 1.0    # Balance between left and right hand usage
CHORD_PATTERN_CONSISTENCY_WEIGHT    = 1.0    # Consistency of chord patterns across set
